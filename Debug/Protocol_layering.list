
Protocol_layering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004994  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d50  08004d50  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d50  08004d50  00005d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d58  08004d58  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d58  08004d58  00005d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004d60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000601c  2**0
                  CONTENTS
 10 .bss          000002ec  2000001c  2000001c  0000601c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  0000601c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bad  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002401  00000000  00000000  00017bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  0001a000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e22  00000000  00000000  0001b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d9e  00000000  00000000  0001bffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015565  00000000  00000000  0003dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf43b  00000000  00000000  000532fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122738  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cd0  00000000  00000000  0012277c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0012744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b04 	.word	0x08004b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004b04 	.word	0x08004b04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <aes_encrypt>:
#include "EncryptDecrypt.h"

  uint8_t key[16] = {0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
                     0xAB, 0xF7, 0xCF, 0x8F, 0xAC, 0x3C, 0x88, 0x92};

void aes_encrypt(uint8_t *input) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b0b2      	sub	sp, #200	@ 0xc8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
    struct AES_ctx ctx;
    AES_init_ctx(&ctx, key);
 80004c0:	f107 0308 	add.w	r3, r7, #8
 80004c4:	4906      	ldr	r1, [pc, #24]	@ (80004e0 <aes_encrypt+0x28>)
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f8f2 	bl	80006b0 <AES_init_ctx>
    AES_ECB_encrypt(&ctx, input);
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fe95 	bl	8001202 <AES_ECB_encrypt>
}
 80004d8:	bf00      	nop
 80004da:	37c8      	adds	r7, #200	@ 0xc8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000000 	.word	0x20000000

080004e4 <aes_decrypt>:

void aes_decrypt(uint8_t *input) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0b2      	sub	sp, #200	@ 0xc8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    struct AES_ctx ctx;
    AES_init_ctx(&ctx, key);
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4906      	ldr	r1, [pc, #24]	@ (800050c <aes_decrypt+0x28>)
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f8dc 	bl	80006b0 <AES_init_ctx>
    AES_ECB_decrypt(&ctx, input);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	6879      	ldr	r1, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fe8d 	bl	800121e <AES_ECB_decrypt>
}
 8000504:	bf00      	nop
 8000506:	37c8      	adds	r7, #200	@ 0xc8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000000 	.word	0x20000000

08000510 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8000510:	b480      	push	{r7}
 8000512:	b089      	sub	sp, #36	@ 0x24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
 800051e:	e030      	b.n	8000582 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	441a      	add	r2, r3
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	6879      	ldr	r1, [r7, #4]
 800052e:	440b      	add	r3, r1
 8000530:	7812      	ldrb	r2, [r2, #0]
 8000532:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	3301      	adds	r3, #1
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	441a      	add	r2, r3
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	3301      	adds	r3, #1
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	440b      	add	r3, r1
 8000548:	7812      	ldrb	r2, [r2, #0]
 800054a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	3302      	adds	r3, #2
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	441a      	add	r2, r3
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	3302      	adds	r3, #2
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	440b      	add	r3, r1
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	3303      	adds	r3, #3
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	441a      	add	r2, r3
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	3303      	adds	r3, #3
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	440b      	add	r3, r1
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 800057c:	69fb      	ldr	r3, [r7, #28]
 800057e:	3301      	adds	r3, #1
 8000580:	61fb      	str	r3, [r7, #28]
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	2b03      	cmp	r3, #3
 8000586:	d9cb      	bls.n	8000520 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000588:	2304      	movs	r3, #4
 800058a:	61fb      	str	r3, [r7, #28]
 800058c:	e081      	b.n	8000692 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	3b01      	subs	r3, #1
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	3301      	adds	r3, #1
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	3302      	adds	r3, #2
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	3303      	adds	r3, #3
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	f003 0303 	and.w	r3, r3, #3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d125      	bne.n	800061a <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 80005ce:	7b3b      	ldrb	r3, [r7, #12]
 80005d0:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 80005e2:	7b3b      	ldrb	r3, [r7, #12]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <KeyExpansion+0x198>)
 80005e8:	5c9b      	ldrb	r3, [r3, r2]
 80005ea:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b2d      	ldr	r3, [pc, #180]	@ (80006a8 <KeyExpansion+0x198>)
 80005f2:	5c9b      	ldrb	r3, [r3, r2]
 80005f4:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <KeyExpansion+0x198>)
 80005fc:	5c9b      	ldrb	r3, [r3, r2]
 80005fe:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	461a      	mov	r2, r3
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <KeyExpansion+0x198>)
 8000606:	5c9b      	ldrb	r3, [r3, r2]
 8000608:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 800060a:	7b3a      	ldrb	r2, [r7, #12]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	089b      	lsrs	r3, r3, #2
 8000610:	4926      	ldr	r1, [pc, #152]	@ (80006ac <KeyExpansion+0x19c>)
 8000612:	5ccb      	ldrb	r3, [r1, r3]
 8000614:	4053      	eors	r3, r2
 8000616:	b2db      	uxtb	r3, r3
 8000618:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	3b04      	subs	r3, #4
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	4413      	add	r3, r2
 800062e:	7819      	ldrb	r1, [r3, #0]
 8000630:	7b3a      	ldrb	r2, [r7, #12]
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	4403      	add	r3, r0
 8000638:	404a      	eors	r2, r1
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	3301      	adds	r3, #1
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	7819      	ldrb	r1, [r3, #0]
 8000648:	7b7a      	ldrb	r2, [r7, #13]
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	3301      	adds	r3, #1
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	4403      	add	r3, r0
 8000652:	404a      	eors	r2, r1
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	3302      	adds	r3, #2
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	7819      	ldrb	r1, [r3, #0]
 8000662:	7bba      	ldrb	r2, [r7, #14]
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	3302      	adds	r3, #2
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	4403      	add	r3, r0
 800066c:	404a      	eors	r2, r1
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	3303      	adds	r3, #3
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	7819      	ldrb	r1, [r3, #0]
 800067c:	7bfa      	ldrb	r2, [r7, #15]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	3303      	adds	r3, #3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	4403      	add	r3, r0
 8000686:	404a      	eors	r2, r1
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	3301      	adds	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	2b2b      	cmp	r3, #43	@ 0x2b
 8000696:	f67f af7a 	bls.w	800058e <KeyExpansion+0x7e>
  }
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3724      	adds	r7, #36	@ 0x24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	08004b2c 	.word	0x08004b2c
 80006ac:	08004d2c 	.word	0x08004d2c

080006b0 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6839      	ldr	r1, [r7, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff26 	bl	8000510 <KeyExpansion>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80006da:	2300      	movs	r3, #0
 80006dc:	75fb      	strb	r3, [r7, #23]
 80006de:	e027      	b.n	8000730 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 80006e0:	2300      	movs	r3, #0
 80006e2:	75bb      	strb	r3, [r7, #22]
 80006e4:	e01e      	b.n	8000724 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80006e6:	7dfa      	ldrb	r2, [r7, #23]
 80006e8:	7dbb      	ldrb	r3, [r7, #22]
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	0092      	lsls	r2, r2, #2
 80006ee:	440a      	add	r2, r1
 80006f0:	4413      	add	r3, r2
 80006f2:	7818      	ldrb	r0, [r3, #0]
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	009a      	lsls	r2, r3, #2
 80006f8:	7dfb      	ldrb	r3, [r7, #23]
 80006fa:	4413      	add	r3, r2
 80006fc:	009a      	lsls	r2, r3, #2
 80006fe:	7dbb      	ldrb	r3, [r7, #22]
 8000700:	4413      	add	r3, r2
 8000702:	461a      	mov	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	7819      	ldrb	r1, [r3, #0]
 800070a:	7dfa      	ldrb	r2, [r7, #23]
 800070c:	7dbb      	ldrb	r3, [r7, #22]
 800070e:	4041      	eors	r1, r0
 8000710:	b2c8      	uxtb	r0, r1
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	0092      	lsls	r2, r2, #2
 8000716:	440a      	add	r2, r1
 8000718:	4413      	add	r3, r2
 800071a:	4602      	mov	r2, r0
 800071c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 800071e:	7dbb      	ldrb	r3, [r7, #22]
 8000720:	3301      	adds	r3, #1
 8000722:	75bb      	strb	r3, [r7, #22]
 8000724:	7dbb      	ldrb	r3, [r7, #22]
 8000726:	2b03      	cmp	r3, #3
 8000728:	d9dd      	bls.n	80006e6 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	3301      	adds	r3, #1
 800072e:	75fb      	strb	r3, [r7, #23]
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d9d4      	bls.n	80006e0 <AddRoundKey+0x14>
    }
  }
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
 8000750:	e01d      	b.n	800078e <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8000752:	2300      	movs	r3, #0
 8000754:	73bb      	strb	r3, [r7, #14]
 8000756:	e014      	b.n	8000782 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8000758:	7bba      	ldrb	r2, [r7, #14]
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	440a      	add	r2, r1
 8000762:	4413      	add	r3, r2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	7bba      	ldrb	r2, [r7, #14]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	490d      	ldr	r1, [pc, #52]	@ (80007a4 <SubBytes+0x60>)
 800076e:	5c08      	ldrb	r0, [r1, r0]
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	0092      	lsls	r2, r2, #2
 8000774:	440a      	add	r2, r1
 8000776:	4413      	add	r3, r2
 8000778:	4602      	mov	r2, r0
 800077a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 800077c:	7bbb      	ldrb	r3, [r7, #14]
 800077e:	3301      	adds	r3, #1
 8000780:	73bb      	strb	r3, [r7, #14]
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d9e7      	bls.n	8000758 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	3301      	adds	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d9de      	bls.n	8000752 <SubBytes+0xe>
    }
  }
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	08004b2c 	.word	0x08004b2c

080007a8 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	795a      	ldrb	r2, [r3, #5]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a5a      	ldrb	r2, [r3, #9]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7b5a      	ldrb	r2, [r3, #13]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	789b      	ldrb	r3, [r3, #2]
 80007d8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7a9a      	ldrb	r2, [r3, #10]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	799b      	ldrb	r3, [r3, #6]
 80007ec:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7b9a      	ldrb	r2, [r3, #14]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7bfa      	ldrb	r2, [r7, #15]
 80007fa:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7bda      	ldrb	r2, [r3, #15]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7ada      	ldrb	r2, [r3, #11]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	79da      	ldrb	r2, [r3, #7]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	71da      	strb	r2, [r3, #7]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <xtime>:

static uint8_t xtime(uint8_t x)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	b25a      	sxtb	r2, r3
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	09db      	lsrs	r3, r3, #7
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4619      	mov	r1, r3
 8000844:	0049      	lsls	r1, r1, #1
 8000846:	440b      	add	r3, r1
 8000848:	4619      	mov	r1, r3
 800084a:	00c8      	lsls	r0, r1, #3
 800084c:	4619      	mov	r1, r3
 800084e:	4603      	mov	r3, r0
 8000850:	440b      	add	r3, r1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	b25b      	sxtb	r3, r3
 8000856:	4053      	eors	r3, r2
 8000858:	b25b      	sxtb	r3, r3
 800085a:	b2db      	uxtb	r3, r3
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e0a4      	b.n	80009c0 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 8000876:	7bfa      	ldrb	r2, [r7, #15]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800087e:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	785b      	ldrb	r3, [r3, #1]
 8000892:	4053      	eors	r3, r2
 8000894:	b2da      	uxtb	r2, r3
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	440b      	add	r3, r1
 800089e:	789b      	ldrb	r3, [r3, #2]
 80008a0:	4053      	eors	r3, r2
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	440b      	add	r3, r1
 80008ac:	78db      	ldrb	r3, [r3, #3]
 80008ae:	4053      	eors	r3, r2
 80008b0:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80008b2:	7bfa      	ldrb	r2, [r7, #15]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	4053      	eors	r3, r2
 80008c6:	733b      	strb	r3, [r7, #12]
 80008c8:	7b3b      	ldrb	r3, [r7, #12]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffae 	bl	800082c <xtime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	733b      	strb	r3, [r7, #12]
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80008dc:	7b3a      	ldrb	r2, [r7, #12]
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	4053      	eors	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	404b      	eors	r3, r1
 80008e8:	b2d9      	uxtb	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	785a      	ldrb	r2, [r3, #1]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	789b      	ldrb	r3, [r3, #2]
 8000904:	4053      	eors	r3, r2
 8000906:	733b      	strb	r3, [r7, #12]
 8000908:	7b3b      	ldrb	r3, [r7, #12]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff8e 	bl	800082c <xtime>
 8000910:	4603      	mov	r3, r0
 8000912:	733b      	strb	r3, [r7, #12]
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	7859      	ldrb	r1, [r3, #1]
 800091e:	7b3a      	ldrb	r2, [r7, #12]
 8000920:	7b7b      	ldrb	r3, [r7, #13]
 8000922:	4053      	eors	r3, r2
 8000924:	b2da      	uxtb	r2, r3
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	404a      	eors	r2, r1
 800092a:	b2d1      	uxtb	r1, r2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	460a      	mov	r2, r1
 8000934:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	789a      	ldrb	r2, [r3, #2]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	440b      	add	r3, r1
 8000948:	78db      	ldrb	r3, [r3, #3]
 800094a:	4053      	eors	r3, r2
 800094c:	733b      	strb	r3, [r7, #12]
 800094e:	7b3b      	ldrb	r3, [r7, #12]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff6b 	bl	800082c <xtime>
 8000956:	4603      	mov	r3, r0
 8000958:	733b      	strb	r3, [r7, #12]
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	7899      	ldrb	r1, [r3, #2]
 8000964:	7b3a      	ldrb	r2, [r7, #12]
 8000966:	7b7b      	ldrb	r3, [r7, #13]
 8000968:	4053      	eors	r3, r2
 800096a:	b2da      	uxtb	r2, r3
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	404a      	eors	r2, r1
 8000970:	b2d1      	uxtb	r1, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	78da      	ldrb	r2, [r3, #3]
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	4053      	eors	r3, r2
 800098a:	733b      	strb	r3, [r7, #12]
 800098c:	7b3b      	ldrb	r3, [r7, #12]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff4c 	bl	800082c <xtime>
 8000994:	4603      	mov	r3, r0
 8000996:	733b      	strb	r3, [r7, #12]
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	78d9      	ldrb	r1, [r3, #3]
 80009a2:	7b3a      	ldrb	r2, [r7, #12]
 80009a4:	7b7b      	ldrb	r3, [r7, #13]
 80009a6:	4053      	eors	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	404a      	eors	r2, r1
 80009ae:	b2d1      	uxtb	r1, r2
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	460a      	mov	r2, r1
 80009b8:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	3301      	adds	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	f67f af57 	bls.w	8000876 <MixColumns+0xe>
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80009d2:	b5b0      	push	{r4, r5, r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e33b      	b.n	8001058 <InvMixColumns+0x686>
  {
    a = (*state)[i][0];
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80009e8:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	785b      	ldrb	r3, [r3, #1]
 80009f4:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	78db      	ldrb	r3, [r3, #3]
 8000a0c:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff0b 	bl	800082c <xtime>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff07 	bl	800082c <xtime>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff03 	bl	800082c <xtime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff feff 	bl	800082c <xtime>
 8000a2e:	7abb      	ldrb	r3, [r7, #10]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fefb 	bl	800082c <xtime>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fef7 	bl	800082c <xtime>
 8000a3e:	7abb      	ldrb	r3, [r7, #10]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fef3 	bl	800082c <xtime>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff feef 	bl	800082c <xtime>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff feeb 	bl	800082c <xtime>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fee7 	bl	800082c <xtime>
 8000a5e:	7a7b      	ldrb	r3, [r7, #9]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fee3 	bl	800082c <xtime>
 8000a66:	7a7b      	ldrb	r3, [r7, #9]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fedf 	bl	800082c <xtime>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fedb 	bl	800082c <xtime>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fed7 	bl	800082c <xtime>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fed3 	bl	800082c <xtime>
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fecf 	bl	800082c <xtime>
 8000a8e:	7a3b      	ldrb	r3, [r7, #8]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fecb 	bl	800082c <xtime>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fec7 	bl	800082c <xtime>
 8000a9e:	7a3b      	ldrb	r3, [r7, #8]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fec3 	bl	800082c <xtime>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff febf 	bl	800082c <xtime>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff febb 	bl	800082c <xtime>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff feb7 	bl	800082c <xtime>
 8000abe:	7afb      	ldrb	r3, [r7, #11]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff feb3 	bl	800082c <xtime>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461c      	mov	r4, r3
 8000aca:	7afb      	ldrb	r3, [r7, #11]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fead 	bl	800082c <xtime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fea9 	bl	800082c <xtime>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4063      	eors	r3, r4
 8000ade:	b2dc      	uxtb	r4, r3
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fea2 	bl	800082c <xtime>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe9e 	bl	800082c <xtime>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fe9a 	bl	800082c <xtime>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4063      	eors	r3, r4
 8000afc:	b2dc      	uxtb	r4, r3
 8000afe:	7abb      	ldrb	r3, [r7, #10]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fe93 	bl	800082c <xtime>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	7abb      	ldrb	r3, [r7, #10]
 8000b0c:	4053      	eors	r3, r2
 8000b0e:	b2dd      	uxtb	r5, r3
 8000b10:	7abb      	ldrb	r3, [r7, #10]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe8a 	bl	800082c <xtime>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fe86 	bl	800082c <xtime>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe82 	bl	800082c <xtime>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	406b      	eors	r3, r5
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4063      	eors	r3, r4
 8000b30:	b2dc      	uxtb	r4, r3
 8000b32:	7a7b      	ldrb	r3, [r7, #9]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe79 	bl	800082c <xtime>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe75 	bl	800082c <xtime>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	7a7b      	ldrb	r3, [r7, #9]
 8000b48:	4053      	eors	r3, r2
 8000b4a:	b2dd      	uxtb	r5, r3
 8000b4c:	7a7b      	ldrb	r3, [r7, #9]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fe6c 	bl	800082c <xtime>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fe68 	bl	800082c <xtime>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe64 	bl	800082c <xtime>
 8000b64:	4603      	mov	r3, r0
 8000b66:	406b      	eors	r3, r5
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4063      	eors	r3, r4
 8000b6c:	b2dc      	uxtb	r4, r3
 8000b6e:	7a3b      	ldrb	r3, [r7, #8]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe5b 	bl	800082c <xtime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe57 	bl	800082c <xtime>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe53 	bl	800082c <xtime>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	7a3b      	ldrb	r3, [r7, #8]
 8000b8c:	4053      	eors	r3, r2
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4063      	eors	r3, r4
 8000b92:	b2d9      	uxtb	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8000b9c:	7afb      	ldrb	r3, [r7, #11]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe44 	bl	800082c <xtime>
 8000ba4:	7afb      	ldrb	r3, [r7, #11]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe40 	bl	800082c <xtime>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fe3c 	bl	800082c <xtime>
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe38 	bl	800082c <xtime>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fe34 	bl	800082c <xtime>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe30 	bl	800082c <xtime>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe2c 	bl	800082c <xtime>
 8000bd4:	7abb      	ldrb	r3, [r7, #10]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe28 	bl	800082c <xtime>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fe24 	bl	800082c <xtime>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fe20 	bl	800082c <xtime>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe1c 	bl	800082c <xtime>
 8000bf4:	7a7b      	ldrb	r3, [r7, #9]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fe18 	bl	800082c <xtime>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fe14 	bl	800082c <xtime>
 8000c04:	7a7b      	ldrb	r3, [r7, #9]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe10 	bl	800082c <xtime>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fe0c 	bl	800082c <xtime>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe08 	bl	800082c <xtime>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe04 	bl	800082c <xtime>
 8000c24:	7a3b      	ldrb	r3, [r7, #8]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fe00 	bl	800082c <xtime>
 8000c2c:	7a3b      	ldrb	r3, [r7, #8]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fdfc 	bl	800082c <xtime>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fdf8 	bl	800082c <xtime>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fdf4 	bl	800082c <xtime>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fdf0 	bl	800082c <xtime>
 8000c4c:	7afb      	ldrb	r3, [r7, #11]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fdec 	bl	800082c <xtime>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fde8 	bl	800082c <xtime>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fde4 	bl	800082c <xtime>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	7afb      	ldrb	r3, [r7, #11]
 8000c6a:	4053      	eors	r3, r2
 8000c6c:	b2dc      	uxtb	r4, r3
 8000c6e:	7abb      	ldrb	r3, [r7, #10]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fddb 	bl	800082c <xtime>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461d      	mov	r5, r3
 8000c7a:	7abb      	ldrb	r3, [r7, #10]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fdd5 	bl	800082c <xtime>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fdd1 	bl	800082c <xtime>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	406b      	eors	r3, r5
 8000c8e:	b2dd      	uxtb	r5, r3
 8000c90:	7abb      	ldrb	r3, [r7, #10]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fdca 	bl	800082c <xtime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fdc6 	bl	800082c <xtime>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fdc2 	bl	800082c <xtime>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	406b      	eors	r3, r5
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4063      	eors	r3, r4
 8000cb0:	b2dc      	uxtb	r4, r3
 8000cb2:	7a7b      	ldrb	r3, [r7, #9]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fdb9 	bl	800082c <xtime>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	7a7b      	ldrb	r3, [r7, #9]
 8000cc0:	4053      	eors	r3, r2
 8000cc2:	b2dd      	uxtb	r5, r3
 8000cc4:	7a7b      	ldrb	r3, [r7, #9]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fdb0 	bl	800082c <xtime>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fdac 	bl	800082c <xtime>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fda8 	bl	800082c <xtime>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	406b      	eors	r3, r5
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4063      	eors	r3, r4
 8000ce4:	b2dc      	uxtb	r4, r3
 8000ce6:	7a3b      	ldrb	r3, [r7, #8]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fd9f 	bl	800082c <xtime>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fd9b 	bl	800082c <xtime>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	7a3b      	ldrb	r3, [r7, #8]
 8000cfc:	4053      	eors	r3, r2
 8000cfe:	b2dd      	uxtb	r5, r3
 8000d00:	7a3b      	ldrb	r3, [r7, #8]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd92 	bl	800082c <xtime>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fd8e 	bl	800082c <xtime>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fd8a 	bl	800082c <xtime>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	406b      	eors	r3, r5
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4063      	eors	r3, r4
 8000d20:	b2d9      	uxtb	r1, r3
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fd7b 	bl	800082c <xtime>
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fd77 	bl	800082c <xtime>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fd73 	bl	800082c <xtime>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fd6f 	bl	800082c <xtime>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fd6b 	bl	800082c <xtime>
 8000d56:	7abb      	ldrb	r3, [r7, #10]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fd67 	bl	800082c <xtime>
 8000d5e:	7abb      	ldrb	r3, [r7, #10]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fd63 	bl	800082c <xtime>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fd5f 	bl	800082c <xtime>
 8000d6e:	7abb      	ldrb	r3, [r7, #10]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd5b 	bl	800082c <xtime>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fd57 	bl	800082c <xtime>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fd53 	bl	800082c <xtime>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fd4f 	bl	800082c <xtime>
 8000d8e:	7a7b      	ldrb	r3, [r7, #9]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fd4b 	bl	800082c <xtime>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fd47 	bl	800082c <xtime>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fd43 	bl	800082c <xtime>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd3f 	bl	800082c <xtime>
 8000dae:	7a3b      	ldrb	r3, [r7, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fd3b 	bl	800082c <xtime>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fd37 	bl	800082c <xtime>
 8000dbe:	7a3b      	ldrb	r3, [r7, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fd33 	bl	800082c <xtime>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fd2f 	bl	800082c <xtime>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fd2b 	bl	800082c <xtime>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fd27 	bl	800082c <xtime>
 8000dde:	7afb      	ldrb	r3, [r7, #11]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fd23 	bl	800082c <xtime>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fd1f 	bl	800082c <xtime>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	7afb      	ldrb	r3, [r7, #11]
 8000df4:	4053      	eors	r3, r2
 8000df6:	b2dc      	uxtb	r4, r3
 8000df8:	7afb      	ldrb	r3, [r7, #11]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fd16 	bl	800082c <xtime>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fd12 	bl	800082c <xtime>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fd0e 	bl	800082c <xtime>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4063      	eors	r3, r4
 8000e14:	b2dc      	uxtb	r4, r3
 8000e16:	7abb      	ldrb	r3, [r7, #10]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fd07 	bl	800082c <xtime>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fd03 	bl	800082c <xtime>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fcff 	bl	800082c <xtime>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	7abb      	ldrb	r3, [r7, #10]
 8000e34:	4053      	eors	r3, r2
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4063      	eors	r3, r4
 8000e3a:	b2dc      	uxtb	r4, r3
 8000e3c:	7a7b      	ldrb	r3, [r7, #9]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fcf4 	bl	800082c <xtime>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461d      	mov	r5, r3
 8000e48:	7a7b      	ldrb	r3, [r7, #9]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcee 	bl	800082c <xtime>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fcea 	bl	800082c <xtime>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	406b      	eors	r3, r5
 8000e5c:	b2dd      	uxtb	r5, r3
 8000e5e:	7a7b      	ldrb	r3, [r7, #9]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fce3 	bl	800082c <xtime>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fcdf 	bl	800082c <xtime>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fcdb 	bl	800082c <xtime>
 8000e76:	4603      	mov	r3, r0
 8000e78:	406b      	eors	r3, r5
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4063      	eors	r3, r4
 8000e7e:	b2dc      	uxtb	r4, r3
 8000e80:	7a3b      	ldrb	r3, [r7, #8]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fcd2 	bl	800082c <xtime>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	7a3b      	ldrb	r3, [r7, #8]
 8000e8e:	4053      	eors	r3, r2
 8000e90:	b2dd      	uxtb	r5, r3
 8000e92:	7a3b      	ldrb	r3, [r7, #8]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fcc9 	bl	800082c <xtime>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fcc5 	bl	800082c <xtime>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fcc1 	bl	800082c <xtime>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	406b      	eors	r3, r5
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4063      	eors	r3, r4
 8000eb2:	b2d9      	uxtb	r1, r3
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000ec0:	7afb      	ldrb	r3, [r7, #11]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fcb2 	bl	800082c <xtime>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fcae 	bl	800082c <xtime>
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fcaa 	bl	800082c <xtime>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fca6 	bl	800082c <xtime>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fca2 	bl	800082c <xtime>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fc9e 	bl	800082c <xtime>
 8000ef0:	7abb      	ldrb	r3, [r7, #10]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fc9a 	bl	800082c <xtime>
 8000ef8:	7abb      	ldrb	r3, [r7, #10]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fc96 	bl	800082c <xtime>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fc92 	bl	800082c <xtime>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fc8e 	bl	800082c <xtime>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc8a 	bl	800082c <xtime>
 8000f18:	7a7b      	ldrb	r3, [r7, #9]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fc86 	bl	800082c <xtime>
 8000f20:	7a7b      	ldrb	r3, [r7, #9]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fc82 	bl	800082c <xtime>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fc7e 	bl	800082c <xtime>
 8000f30:	7a7b      	ldrb	r3, [r7, #9]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fc7a 	bl	800082c <xtime>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fc76 	bl	800082c <xtime>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc72 	bl	800082c <xtime>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fc6e 	bl	800082c <xtime>
 8000f50:	7a3b      	ldrb	r3, [r7, #8]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fc6a 	bl	800082c <xtime>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fc66 	bl	800082c <xtime>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fc62 	bl	800082c <xtime>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fc5e 	bl	800082c <xtime>
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fc5a 	bl	800082c <xtime>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	7afb      	ldrb	r3, [r7, #11]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	b2dc      	uxtb	r4, r3
 8000f82:	7afb      	ldrb	r3, [r7, #11]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fc51 	bl	800082c <xtime>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fc4d 	bl	800082c <xtime>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fc49 	bl	800082c <xtime>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4063      	eors	r3, r4
 8000f9e:	b2dc      	uxtb	r4, r3
 8000fa0:	7abb      	ldrb	r3, [r7, #10]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fc42 	bl	800082c <xtime>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fc3e 	bl	800082c <xtime>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	7abb      	ldrb	r3, [r7, #10]
 8000fb6:	4053      	eors	r3, r2
 8000fb8:	b2dd      	uxtb	r5, r3
 8000fba:	7abb      	ldrb	r3, [r7, #10]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fc35 	bl	800082c <xtime>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fc31 	bl	800082c <xtime>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fc2d 	bl	800082c <xtime>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	406b      	eors	r3, r5
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4063      	eors	r3, r4
 8000fda:	b2dc      	uxtb	r4, r3
 8000fdc:	7a7b      	ldrb	r3, [r7, #9]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fc24 	bl	800082c <xtime>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fc20 	bl	800082c <xtime>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fc1c 	bl	800082c <xtime>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	7a7b      	ldrb	r3, [r7, #9]
 8000ffa:	4053      	eors	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4063      	eors	r3, r4
 8001000:	b2dc      	uxtb	r4, r3
 8001002:	7a3b      	ldrb	r3, [r7, #8]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fc11 	bl	800082c <xtime>
 800100a:	4603      	mov	r3, r0
 800100c:	461d      	mov	r5, r3
 800100e:	7a3b      	ldrb	r3, [r7, #8]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fc0b 	bl	800082c <xtime>
 8001016:	4603      	mov	r3, r0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fc07 	bl	800082c <xtime>
 800101e:	4603      	mov	r3, r0
 8001020:	406b      	eors	r3, r5
 8001022:	b2dd      	uxtb	r5, r3
 8001024:	7a3b      	ldrb	r3, [r7, #8]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fc00 	bl	800082c <xtime>
 800102c:	4603      	mov	r3, r0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fbfc 	bl	800082c <xtime>
 8001034:	4603      	mov	r3, r0
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fbf8 	bl	800082c <xtime>
 800103c:	4603      	mov	r3, r0
 800103e:	406b      	eors	r3, r5
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4063      	eors	r3, r4
 8001044:	b2d9      	uxtb	r1, r3
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	460a      	mov	r2, r1
 8001050:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b03      	cmp	r3, #3
 800105c:	f77f acc0 	ble.w	80009e0 <InvMixColumns+0xe>
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800106c <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e01d      	b.n	80010b6 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 800107a:	2300      	movs	r3, #0
 800107c:	73bb      	strb	r3, [r7, #14]
 800107e:	e014      	b.n	80010aa <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8001080:	7bba      	ldrb	r2, [r7, #14]
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	440a      	add	r2, r1
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	7bba      	ldrb	r2, [r7, #14]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	490d      	ldr	r1, [pc, #52]	@ (80010cc <InvSubBytes+0x60>)
 8001096:	5c08      	ldrb	r0, [r1, r0]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	440a      	add	r2, r1
 800109e:	4413      	add	r3, r2
 80010a0:	4602      	mov	r2, r0
 80010a2:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d9e7      	bls.n	8001080 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3301      	adds	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d9de      	bls.n	800107a <InvSubBytes+0xe>
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	08004c2c 	.word	0x08004c2c

080010d0 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7b5b      	ldrb	r3, [r3, #13]
 80010dc:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7a5a      	ldrb	r2, [r3, #9]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	795a      	ldrb	r2, [r3, #5]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	785a      	ldrb	r2, [r3, #1]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	789b      	ldrb	r3, [r3, #2]
 8001100:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7a9a      	ldrb	r2, [r3, #10]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	799b      	ldrb	r3, [r3, #6]
 8001114:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7b9a      	ldrb	r2, [r3, #14]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	78db      	ldrb	r3, [r3, #3]
 8001128:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	79da      	ldrb	r2, [r3, #7]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7ada      	ldrb	r2, [r3, #11]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7bda      	ldrb	r2, [r3, #15]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	73da      	strb	r2, [r3, #15]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fab0 	bl	80006cc <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fae7 	bl	8000744 <SubBytes>
    ShiftRows(state);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fb16 	bl	80007a8 <ShiftRows>
    if (round == Nr) {
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b0a      	cmp	r3, #10
 8001180:	d00c      	beq.n	800119c <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fb70 	bl	8000868 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fa9c 	bl	80006cc <AddRoundKey>
  for (round = 1; ; ++round)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 800119a:	e7e9      	b.n	8001170 <Cipher+0x1c>
      break;
 800119c:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	200a      	movs	r0, #10
 80011a4:	f7ff fa92 	bl	80006cc <AddRoundKey>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	200a      	movs	r0, #10
 80011c4:	f7ff fa82 	bl	80006cc <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 80011c8:	2309      	movs	r3, #9
 80011ca:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff7f 	bl	80010d0 <InvShiftRows>
    InvSubBytes(state);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff4a 	bl	800106c <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fa74 	bl	80006cc <AddRoundKey>
    if (round == 0) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fbf1 	bl	80009d2 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 80011f6:	e7e9      	b.n	80011cc <InvCipher+0x1c>
      break;
 80011f8:	bf00      	nop
  }

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4619      	mov	r1, r3
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f7ff ff9f 	bl	8001154 <Cipher>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4619      	mov	r1, r3
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f7ff ffbf 	bl	80011b0 <InvCipher>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f000 fdf1 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001246:	f000 f82f 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124a:	f000 fa57 	bl	80016fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800124e:	f000 f895 	bl	800137c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001252:	f000 f8c1 	bl	80013d8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001256:	f000 f8ed 	bl	8001434 <MX_I2C3_Init>
  MX_SPI1_Init();
 800125a:	f000 f919 	bl	8001490 <MX_SPI1_Init>
  MX_SPI2_Init();
 800125e:	f000 f94d 	bl	80014fc <MX_SPI2_Init>
  MX_TIM2_Init();
 8001262:	f000 f981 	bl	8001568 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001266:	f000 f9f5 	bl	8001654 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800126a:	f000 fa1d 	bl	80016a8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800126e:	f000 f9c7 	bl	8001600 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t data[16] = {0x12, 0x03, 0x00, 0x00, 0x00, 0x01, 0xA9, 0x86,
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <main+0x64>)
 8001274:	463c      	mov	r4, r7
 8001276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  aes_encrypt(data);
 800127c:	463b      	mov	r3, r7
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f91a 	bl	80004b8 <aes_encrypt>
  aes_decrypt(data);
 8001284:	463b      	mov	r3, r7
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f92c 	bl	80004e4 <aes_decrypt>

  HAL_UART_Transmit(&huart1, data, 16, 1000);
 800128c:	4639      	mov	r1, r7
 800128e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001292:	2210      	movs	r2, #16
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <main+0x68>)
 8001296:	f002 fc57 	bl	8003b48 <HAL_UART_Transmit>
  while (1)
 800129a:	bf00      	nop
 800129c:	e7fd      	b.n	800129a <main+0x5e>
 800129e:	bf00      	nop
 80012a0:	08004b1c 	.word	0x08004b1c
 80012a4:	2000022c 	.word	0x2000022c

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b094      	sub	sp, #80	@ 0x50
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2230      	movs	r2, #48	@ 0x30
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fbf8 	bl	8004aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <SystemClock_Config+0xcc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <SystemClock_Config+0xcc>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <SystemClock_Config+0xcc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <SystemClock_Config+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a21      	ldr	r2, [pc, #132]	@ (8001378 <SystemClock_Config+0xd0>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <SystemClock_Config+0xd0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2310      	movs	r3, #16
 800130e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	2302      	movs	r3, #2
 8001312:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001318:	2308      	movs	r3, #8
 800131a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800131c:	23a8      	movs	r3, #168	@ 0xa8
 800131e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001320:	2302      	movs	r3, #2
 8001322:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001324:	2304      	movs	r3, #4
 8001326:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fa8b 	bl	8002848 <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001338:	f000 fa4e 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	230f      	movs	r3, #15
 800133e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001340:	2302      	movs	r3, #2
 8001342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001348:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800134c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800134e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2105      	movs	r1, #5
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fcec 	bl	8002d38 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001366:	f000 fa37 	bl	80017d8 <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3750      	adds	r7, #80	@ 0x50
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <MX_I2C1_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001388:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <MX_I2C1_Init+0x58>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_I2C1_Init+0x50>)
 800139a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013ba:	f001 f901 	bl	80025c0 <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 fa08 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000038 	.word	0x20000038
 80013d0:	40005400 	.word	0x40005400
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013de:	4a13      	ldr	r2, [pc, #76]	@ (800142c <MX_I2C2_Init+0x54>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013e4:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <MX_I2C2_Init+0x58>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_I2C2_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_I2C2_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_I2C2_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_I2C2_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_I2C2_Init+0x50>)
 8001416:	f001 f8d3 	bl	80025c0 <HAL_I2C_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001420:	f000 f9da 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000008c 	.word	0x2000008c
 800142c:	40005800 	.word	0x40005800
 8001430:	000186a0 	.word	0x000186a0

08001434 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <MX_I2C3_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	@ (8001488 <MX_I2C3_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_I2C3_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <MX_I2C3_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_I2C3_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_I2C3_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_I2C3_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <MX_I2C3_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_I2C3_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <MX_I2C3_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_I2C3_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_I2C3_Init+0x50>)
 8001472:	f001 f8a5 	bl	80025c0 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 f9ac 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000e0 	.word	0x200000e0
 8001488:	40005c00 	.word	0x40005c00
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <MX_SPI1_Init+0x64>)
 8001496:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <MX_SPI1_Init+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_SPI1_Init+0x64>)
 800149c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014dc:	220a      	movs	r2, #10
 80014de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014e2:	f001 fe49 	bl	8003178 <HAL_SPI_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014ec:	f000 f974 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000134 	.word	0x20000134
 80014f8:	40013000 	.word	0x40013000

080014fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001502:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001508:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800150c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_SPI2_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800152c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_SPI2_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001540:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_SPI2_Init+0x64>)
 8001548:	220a      	movs	r2, #10
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <MX_SPI2_Init+0x64>)
 800154e:	f001 fe13 	bl	8003178 <HAL_SPI_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001558:	f000 f93e 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000018c 	.word	0x2000018c
 8001564:	40003800 	.word	0x40003800

08001568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001584:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <MX_TIM2_Init+0x94>)
 8001586:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800158a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_TIM2_Init+0x94>)
 800158e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001592:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <MX_TIM2_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_TIM2_Init+0x94>)
 800159c:	2209      	movs	r2, #9
 800159e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <MX_TIM2_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_TIM2_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ac:	4813      	ldr	r0, [pc, #76]	@ (80015fc <MX_TIM2_Init+0x94>)
 80015ae:	f001 fe6c 	bl	800328a <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015b8:	f000 f90e 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <MX_TIM2_Init+0x94>)
 80015ca:	f001 ff9d 	bl	8003508 <HAL_TIM_ConfigClockSource>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015d4:	f000 f900 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_TIM2_Init+0x94>)
 80015e6:	f002 f9cf 	bl	8003988 <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f000 f8f2 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200001e4 	.word	0x200001e4

08001600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_USART1_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800160c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001638:	f002 fa36 	bl	8003aa8 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f000 f8c9 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000022c 	.word	0x2000022c
 8001650:	40011000 	.word	0x40011000

08001654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <MX_USART2_UART_Init+0x50>)
 800165c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001660:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_USART2_UART_Init+0x4c>)
 800168c:	f002 fa0c 	bl	8003aa8 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001696:	f000 f89f 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000274 	.word	0x20000274
 80016a4:	40004400 	.word	0x40004400

080016a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <MX_USART3_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_USART3_UART_Init+0x4c>)
 80016e0:	f002 f9e2 	bl	8003aa8 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f000 f875 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200002bc 	.word	0x200002bc
 80016f8:	40004800 	.word	0x40004800

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b2e      	ldr	r3, [pc, #184]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a2d      	ldr	r2, [pc, #180]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a26      	ldr	r2, [pc, #152]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a1f      	ldr	r2, [pc, #124]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <MX_GPIO_Init+0xd4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017a4:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <MX_GPIO_Init+0xd8>)
 80017a6:	f000 fef1 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 80017aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <MX_GPIO_Init+0xd8>)
 80017c4:	f000 fd46 	bl	8002254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c8:	bf00      	nop
 80017ca:	3728      	adds	r7, #40	@ 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <Error_Handler+0x8>

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001830 <HAL_MspInit+0x4c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	@ 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	@ 0x38
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a5b      	ldr	r2, [pc, #364]	@ (80019c0 <HAL_I2C_MspInit+0x18c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12c      	bne.n	80018b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
 800185a:	4b5a      	ldr	r3, [pc, #360]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a59      	ldr	r2, [pc, #356]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b57      	ldr	r3, [pc, #348]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001872:	23c0      	movs	r3, #192	@ 0xc0
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001876:	2312      	movs	r3, #18
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001882:	2304      	movs	r3, #4
 8001884:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	484e      	ldr	r0, [pc, #312]	@ (80019c8 <HAL_I2C_MspInit+0x194>)
 800188e:	f000 fce1 	bl	8002254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	4b4b      	ldr	r3, [pc, #300]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	4a4a      	ldr	r2, [pc, #296]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a2:	4b48      	ldr	r3, [pc, #288]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80018ae:	e082      	b.n	80019b6 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a45      	ldr	r2, [pc, #276]	@ (80019cc <HAL_I2C_MspInit+0x198>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12c      	bne.n	8001914 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	4b41      	ldr	r3, [pc, #260]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a40      	ldr	r2, [pc, #256]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b3e      	ldr	r3, [pc, #248]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d6:	2303      	movs	r3, #3
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018da:	2312      	movs	r3, #18
 80018dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018e6:	2304      	movs	r3, #4
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4837      	ldr	r0, [pc, #220]	@ (80019d0 <HAL_I2C_MspInit+0x19c>)
 80018f2:	f000 fcaf 	bl	8002254 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b32      	ldr	r3, [pc, #200]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a31      	ldr	r2, [pc, #196]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001900:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
}
 8001912:	e050      	b.n	80019b6 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_I2C_MspInit+0x1a0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d14b      	bne.n	80019b6 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a27      	ldr	r2, [pc, #156]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a20      	ldr	r2, [pc, #128]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195c:	2312      	movs	r3, #18
 800195e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001968:	2304      	movs	r3, #4
 800196a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001970:	4619      	mov	r1, r3
 8001972:	4819      	ldr	r0, [pc, #100]	@ (80019d8 <HAL_I2C_MspInit+0x1a4>)
 8001974:	f000 fc6e 	bl	8002254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001978:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197e:	2312      	movs	r3, #18
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800198a:	2304      	movs	r3, #4
 800198c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001992:	4619      	mov	r1, r3
 8001994:	4811      	ldr	r0, [pc, #68]	@ (80019dc <HAL_I2C_MspInit+0x1a8>)
 8001996:	f000 fc5d 	bl	8002254 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 80019a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_I2C_MspInit+0x190>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
}
 80019b6:	bf00      	nop
 80019b8:	3738      	adds	r7, #56	@ 0x38
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40005400 	.word	0x40005400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40005800 	.word	0x40005800
 80019d0:	40021400 	.word	0x40021400
 80019d4:	40005c00 	.word	0x40005c00
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020000 	.word	0x40020000

080019e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	@ 0x30
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a41      	ldr	r2, [pc, #260]	@ (8001b04 <HAL_SPI_MspInit+0x124>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12c      	bne.n	8001a5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a12:	4b3d      	ldr	r3, [pc, #244]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	4b39      	ldr	r3, [pc, #228]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a38      	ldr	r2, [pc, #224]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a3a:	23e0      	movs	r3, #224	@ 0xe0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	482d      	ldr	r0, [pc, #180]	@ (8001b0c <HAL_SPI_MspInit+0x12c>)
 8001a56:	f000 fbfd 	bl	8002254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a5a:	e04f      	b.n	8001afc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2b      	ldr	r2, [pc, #172]	@ (8001b10 <HAL_SPI_MspInit+0x130>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d14a      	bne.n	8001afc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	4a26      	ldr	r2, [pc, #152]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a18      	ldr	r2, [pc, #96]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_SPI_MspInit+0x128>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aba:	230c      	movs	r3, #12
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aca:	2305      	movs	r3, #5
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480f      	ldr	r0, [pc, #60]	@ (8001b14 <HAL_SPI_MspInit+0x134>)
 8001ad6:	f000 fbbd 	bl	8002254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aec:	2305      	movs	r3, #5
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4808      	ldr	r0, [pc, #32]	@ (8001b18 <HAL_SPI_MspInit+0x138>)
 8001af8:	f000 fbac 	bl	8002254 <HAL_GPIO_Init>
}
 8001afc:	bf00      	nop
 8001afe:	3730      	adds	r7, #48	@ 0x30
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40013000 	.word	0x40013000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40003800 	.word	0x40003800
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b2c:	d115      	bne.n	8001b5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <HAL_TIM_Base_MspInit+0x48>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <HAL_TIM_Base_MspInit+0x48>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_TIM_Base_MspInit+0x48>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	201c      	movs	r0, #28
 8001b50:	f000 fab7 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b54:	201c      	movs	r0, #28
 8001b56:	f000 fad0 	bl	80020fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08e      	sub	sp, #56	@ 0x38
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a58      	ldr	r2, [pc, #352]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d135      	bne.n	8001bf6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	4b57      	ldr	r3, [pc, #348]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001b94:	f043 0310 	orr.w	r3, r3, #16
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b54      	ldr	r3, [pc, #336]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	4b50      	ldr	r3, [pc, #320]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a4f      	ldr	r2, [pc, #316]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4844      	ldr	r0, [pc, #272]	@ (8001cf0 <HAL_UART_MspInit+0x188>)
 8001be0:	f000 fb38 	bl	8002254 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2025      	movs	r0, #37	@ 0x25
 8001bea:	f000 fa6a 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bee:	2025      	movs	r0, #37	@ 0x25
 8001bf0:	f000 fa83 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bf4:	e073      	b.n	8001cde <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8001cf4 <HAL_UART_MspInit+0x18c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d134      	bne.n	8001c6a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	4a38      	ldr	r2, [pc, #224]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	4a31      	ldr	r2, [pc, #196]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c50:	4619      	mov	r1, r3
 8001c52:	4827      	ldr	r0, [pc, #156]	@ (8001cf0 <HAL_UART_MspInit+0x188>)
 8001c54:	f000 fafe 	bl	8002254 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2026      	movs	r0, #38	@ 0x26
 8001c5e:	f000 fa30 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c62:	2026      	movs	r0, #38	@ 0x26
 8001c64:	f000 fa49 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8001c68:	e039      	b.n	8001cde <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a22      	ldr	r2, [pc, #136]	@ (8001cf8 <HAL_UART_MspInit+0x190>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d134      	bne.n	8001cde <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 8001cac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <HAL_UART_MspInit+0x194>)
 8001cca:	f000 fac3 	bl	8002254 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2027      	movs	r0, #39	@ 0x27
 8001cd4:	f000 f9f5 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cd8:	2027      	movs	r0, #39	@ 0x27
 8001cda:	f000 fa0e 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3738      	adds	r7, #56	@ 0x38
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40004400 	.word	0x40004400
 8001cf8:	40004800 	.word	0x40004800
 8001cfc:	40020800 	.word	0x40020800

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <NMI_Handler+0x4>

08001d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <MemManage_Handler+0x4>

08001d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d56:	f000 f8b9 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <TIM2_IRQHandler+0x10>)
 8001d66:	f001 fadf 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200001e4 	.word	0x200001e4

08001d74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <USART1_IRQHandler+0x10>)
 8001d7a:	f001 ff71 	bl	8003c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000022c 	.word	0x2000022c

08001d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <USART2_IRQHandler+0x10>)
 8001d8e:	f001 ff67 	bl	8003c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000274 	.word	0x20000274

08001d9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <USART3_IRQHandler+0x10>)
 8001da2:	f001 ff5d 	bl	8003c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200002bc 	.word	0x200002bc

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dd8:	f7ff ffea 	bl	8001db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f002 fe5b 	bl	8004abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff fa19 	bl	800123c <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001e18:	08004d60 	.word	0x08004d60
  ldr r2, =_sbss
 8001e1c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001e20:	20000308 	.word	0x20000308

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f92b 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fcc2 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f943 	bl	8002116 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f90b 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000010 	.word	0x20000010
 8001ec4:	20000018 	.word	0x20000018
 8001ec8:	20000014 	.word	0x20000014

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000018 	.word	0x20000018
 8001ef0:	20000304 	.word	0x20000304

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000304 	.word	0x20000304

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff feda 	bl	8001ef4 <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d008      	beq.n	8002160 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e052      	b.n	8002206 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0216 	bic.w	r2, r2, #22
 800216e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800217e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <HAL_DMA_Abort+0x62>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0208 	bic.w	r2, r2, #8
 800219e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b0:	e013      	b.n	80021da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b2:	f7ff fe9f 	bl	8001ef4 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d90c      	bls.n	80021da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2203      	movs	r2, #3
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e015      	b.n	8002206 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e4      	bne.n	80021b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	223f      	movs	r2, #63	@ 0x3f
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d004      	beq.n	800222c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2280      	movs	r2, #128	@ 0x80
 8002226:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e00c      	b.n	8002246 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2205      	movs	r2, #5
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e16b      	b.n	8002548 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 815a 	bne.w	8002542 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d005      	beq.n	80022a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d130      	bne.n	8002308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 0201 	and.w	r2, r3, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b03      	cmp	r3, #3
 8002312:	d017      	beq.n	8002344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d123      	bne.n	8002398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80b4 	beq.w	8002542 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b60      	ldr	r3, [pc, #384]	@ (8002560 <HAL_GPIO_Init+0x30c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002560 <HAL_GPIO_Init+0x30c>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002560 <HAL_GPIO_Init+0x30c>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002564 <HAL_GPIO_Init+0x310>)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a52      	ldr	r2, [pc, #328]	@ (8002568 <HAL_GPIO_Init+0x314>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d02b      	beq.n	800247a <HAL_GPIO_Init+0x226>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a51      	ldr	r2, [pc, #324]	@ (800256c <HAL_GPIO_Init+0x318>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d025      	beq.n	8002476 <HAL_GPIO_Init+0x222>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a50      	ldr	r2, [pc, #320]	@ (8002570 <HAL_GPIO_Init+0x31c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01f      	beq.n	8002472 <HAL_GPIO_Init+0x21e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4f      	ldr	r2, [pc, #316]	@ (8002574 <HAL_GPIO_Init+0x320>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_GPIO_Init+0x21a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4e      	ldr	r2, [pc, #312]	@ (8002578 <HAL_GPIO_Init+0x324>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0x216>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4d      	ldr	r2, [pc, #308]	@ (800257c <HAL_GPIO_Init+0x328>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_GPIO_Init+0x212>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4c      	ldr	r2, [pc, #304]	@ (8002580 <HAL_GPIO_Init+0x32c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <HAL_GPIO_Init+0x20e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4b      	ldr	r2, [pc, #300]	@ (8002584 <HAL_GPIO_Init+0x330>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_GPIO_Init+0x20a>
 800245a:	2307      	movs	r3, #7
 800245c:	e00e      	b.n	800247c <HAL_GPIO_Init+0x228>
 800245e:	2308      	movs	r3, #8
 8002460:	e00c      	b.n	800247c <HAL_GPIO_Init+0x228>
 8002462:	2306      	movs	r3, #6
 8002464:	e00a      	b.n	800247c <HAL_GPIO_Init+0x228>
 8002466:	2305      	movs	r3, #5
 8002468:	e008      	b.n	800247c <HAL_GPIO_Init+0x228>
 800246a:	2304      	movs	r3, #4
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x228>
 800246e:	2303      	movs	r3, #3
 8002470:	e004      	b.n	800247c <HAL_GPIO_Init+0x228>
 8002472:	2302      	movs	r3, #2
 8002474:	e002      	b.n	800247c <HAL_GPIO_Init+0x228>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_GPIO_Init+0x228>
 800247a:	2300      	movs	r3, #0
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	f002 0203 	and.w	r2, r2, #3
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	4093      	lsls	r3, r2
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800248c:	4935      	ldr	r1, [pc, #212]	@ (8002564 <HAL_GPIO_Init+0x310>)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	3302      	adds	r3, #2
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249a:	4b3b      	ldr	r3, [pc, #236]	@ (8002588 <HAL_GPIO_Init+0x334>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024be:	4a32      	ldr	r2, [pc, #200]	@ (8002588 <HAL_GPIO_Init+0x334>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c4:	4b30      	ldr	r3, [pc, #192]	@ (8002588 <HAL_GPIO_Init+0x334>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e8:	4a27      	ldr	r2, [pc, #156]	@ (8002588 <HAL_GPIO_Init+0x334>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ee:	4b26      	ldr	r3, [pc, #152]	@ (8002588 <HAL_GPIO_Init+0x334>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002512:	4a1d      	ldr	r2, [pc, #116]	@ (8002588 <HAL_GPIO_Init+0x334>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_GPIO_Init+0x334>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800253c:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <HAL_GPIO_Init+0x334>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3301      	adds	r3, #1
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b0f      	cmp	r3, #15
 800254c:	f67f ae90 	bls.w	8002270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3724      	adds	r7, #36	@ 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	40013800 	.word	0x40013800
 8002568:	40020000 	.word	0x40020000
 800256c:	40020400 	.word	0x40020400
 8002570:	40020800 	.word	0x40020800
 8002574:	40020c00 	.word	0x40020c00
 8002578:	40021000 	.word	0x40021000
 800257c:	40021400 	.word	0x40021400
 8002580:	40021800 	.word	0x40021800
 8002584:	40021c00 	.word	0x40021c00
 8002588:	40013c00 	.word	0x40013c00

0800258c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
 8002598:	4613      	mov	r3, r2
 800259a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a8:	e003      	b.n	80025b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	041a      	lsls	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e12b      	b.n	800282a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff f924 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	@ 0x24
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002624:	f000 fd80 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8002628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a81      	ldr	r2, [pc, #516]	@ (8002834 <HAL_I2C_Init+0x274>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d807      	bhi.n	8002644 <HAL_I2C_Init+0x84>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a80      	ldr	r2, [pc, #512]	@ (8002838 <HAL_I2C_Init+0x278>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e006      	b.n	8002652 <HAL_I2C_Init+0x92>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a7d      	ldr	r2, [pc, #500]	@ (800283c <HAL_I2C_Init+0x27c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	bf94      	ite	ls
 800264c:	2301      	movls	r3, #1
 800264e:	2300      	movhi	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0e7      	b.n	800282a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4a78      	ldr	r2, [pc, #480]	@ (8002840 <HAL_I2C_Init+0x280>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a6a      	ldr	r2, [pc, #424]	@ (8002834 <HAL_I2C_Init+0x274>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d802      	bhi.n	8002694 <HAL_I2C_Init+0xd4>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3301      	adds	r3, #1
 8002692:	e009      	b.n	80026a8 <HAL_I2C_Init+0xe8>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	4a69      	ldr	r2, [pc, #420]	@ (8002844 <HAL_I2C_Init+0x284>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	3301      	adds	r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	495c      	ldr	r1, [pc, #368]	@ (8002834 <HAL_I2C_Init+0x274>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d819      	bhi.n	80026fc <HAL_I2C_Init+0x13c>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e59      	subs	r1, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026dc:	400b      	ands	r3, r1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_I2C_Init+0x138>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e59      	subs	r1, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f6:	e051      	b.n	800279c <HAL_I2C_Init+0x1dc>
 80026f8:	2304      	movs	r3, #4
 80026fa:	e04f      	b.n	800279c <HAL_I2C_Init+0x1dc>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d111      	bne.n	8002728 <HAL_I2C_Init+0x168>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e012      	b.n	800274e <HAL_I2C_Init+0x18e>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	0099      	lsls	r1, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Init+0x196>
 8002752:	2301      	movs	r3, #1
 8002754:	e022      	b.n	800279c <HAL_I2C_Init+0x1dc>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10e      	bne.n	800277c <HAL_I2C_Init+0x1bc>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e58      	subs	r0, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	440b      	add	r3, r1
 800276c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800277a:	e00f      	b.n	800279c <HAL_I2C_Init+0x1dc>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e58      	subs	r0, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	0099      	lsls	r1, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	3301      	adds	r3, #1
 8002794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	6809      	ldr	r1, [r1, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6911      	ldr	r1, [r2, #16]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68d2      	ldr	r2, [r2, #12]
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	000186a0 	.word	0x000186a0
 8002838:	001e847f 	.word	0x001e847f
 800283c:	003d08ff 	.word	0x003d08ff
 8002840:	431bde83 	.word	0x431bde83
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e267      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002866:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b85      	ldr	r3, [pc, #532]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800287a:	2b08      	cmp	r3, #8
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b82      	ldr	r3, [pc, #520]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e242      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b76      	ldr	r3, [pc, #472]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b70      	ldr	r3, [pc, #448]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b69      	ldr	r3, [pc, #420]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b66      	ldr	r3, [pc, #408]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a65      	ldr	r2, [pc, #404]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff faf8 	bl	8001ef4 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff faf4 	bl	8001ef4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e207      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fae4 	bl	8001ef4 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fae0 	bl	8001ef4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	@ 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1f3      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b51      	ldr	r3, [pc, #324]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800295e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b47      	ldr	r3, [pc, #284]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b44      	ldr	r3, [pc, #272]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1c7      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4937      	ldr	r1, [pc, #220]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff fa99 	bl	8001ef4 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7ff fa95 	bl	8001ef4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a8      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4925      	ldr	r1, [pc, #148]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7ff fa78 	bl	8001ef4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a08:	f7ff fa74 	bl	8001ef4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e187      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d036      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7ff fa58 	bl	8001ef4 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7ff fa54 	bl	8001ef4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e167      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fa41 	bl	8001ef4 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	e00e      	b.n	8002a94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a76:	f7ff fa3d 	bl	8001ef4 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d907      	bls.n	8002a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e150      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470000 	.word	0x42470000
 8002a90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b88      	ldr	r3, [pc, #544]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ea      	bne.n	8002a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8097 	beq.w	8002bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b81      	ldr	r3, [pc, #516]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ace:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b77      	ldr	r3, [pc, #476]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b74      	ldr	r3, [pc, #464]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff f9fd 	bl	8001ef4 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7ff f9f9 	bl	8001ef4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e10c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2ea>
 8002b24:	4b64      	ldr	r3, [pc, #400]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	4a63      	ldr	r2, [pc, #396]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x30c>
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b46:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b54:	4b58      	ldr	r3, [pc, #352]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	4a57      	ldr	r2, [pc, #348]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b60:	4b55      	ldr	r3, [pc, #340]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a54      	ldr	r2, [pc, #336]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7ff f9be 	bl	8001ef4 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7ff f9ba 	bl	8001ef4 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0cb      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b49      	ldr	r3, [pc, #292]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x334>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7ff f9a8 	bl	8001ef4 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7ff f9a4 	bl	8001ef4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0b5      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b39      	ldr	r3, [pc, #228]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4a38      	ldr	r2, [pc, #224]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a1 	beq.w	8002d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be6:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d05c      	beq.n	8002cac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d141      	bne.n	8002c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff f978 	bl	8001ef4 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7ff f974 	bl	8001ef4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e087      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	491b      	ldr	r1, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7ff f94d 	bl	8001ef4 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7ff f949 	bl	8001ef4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e05c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x416>
 8002c7c:	e054      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff f936 	bl	8001ef4 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7ff f932 	bl	8001ef4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e045      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x444>
 8002caa:	e03d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e038      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d121      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d90c      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d044      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e067      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b37      	ldr	r3, [pc, #220]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4934      	ldr	r1, [pc, #208]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7ff f864 	bl	8001ef4 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7ff f860 	bl	8001ef4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b25      	ldr	r3, [pc, #148]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d20c      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f821 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe ffc4 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08004d38 	.word	0x08004d38
 8002efc:	20000010 	.word	0x20000010
 8002f00:	20000014 	.word	0x20000014

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b094      	sub	sp, #80	@ 0x50
 8002f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1c:	4b79      	ldr	r3, [pc, #484]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d00d      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x40>
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	f200 80e1 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x34>
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f36:	e0db      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b73      	ldr	r3, [pc, #460]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f3c:	e0db      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3e:	4b73      	ldr	r3, [pc, #460]	@ (800310c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f42:	e0d8      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f44:	4b6f      	ldr	r3, [pc, #444]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d063      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	099b      	lsrs	r3, r3, #6
 8002f60:	2200      	movs	r2, #0
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f6e:	2300      	movs	r3, #0
 8002f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f76:	4622      	mov	r2, r4
 8002f78:	462b      	mov	r3, r5
 8002f7a:	f04f 0000 	mov.w	r0, #0
 8002f7e:	f04f 0100 	mov.w	r1, #0
 8002f82:	0159      	lsls	r1, r3, #5
 8002f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f88:	0150      	lsls	r0, r2, #5
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4621      	mov	r1, r4
 8002f90:	1a51      	subs	r1, r2, r1
 8002f92:	6139      	str	r1, [r7, #16]
 8002f94:	4629      	mov	r1, r5
 8002f96:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	018b      	lsls	r3, r1, #6
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	018a      	lsls	r2, r1, #6
 8002fb6:	4651      	mov	r1, sl
 8002fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd6:	4690      	mov	r8, r2
 8002fd8:	4699      	mov	r9, r3
 8002fda:	4623      	mov	r3, r4
 8002fdc:	eb18 0303 	adds.w	r3, r8, r3
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	462b      	mov	r3, r5
 8002fe4:	eb49 0303 	adc.w	r3, r9, r3
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	024b      	lsls	r3, r1, #9
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003000:	4621      	mov	r1, r4
 8003002:	024a      	lsls	r2, r1, #9
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800300e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003014:	f7fd f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003020:	e058      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	2200      	movs	r2, #0
 800302a:	4618      	mov	r0, r3
 800302c:	4611      	mov	r1, r2
 800302e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003032:	623b      	str	r3, [r7, #32]
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
 8003038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800303c:	4642      	mov	r2, r8
 800303e:	464b      	mov	r3, r9
 8003040:	f04f 0000 	mov.w	r0, #0
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	0159      	lsls	r1, r3, #5
 800304a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800304e:	0150      	lsls	r0, r2, #5
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4641      	mov	r1, r8
 8003056:	ebb2 0a01 	subs.w	sl, r2, r1
 800305a:	4649      	mov	r1, r9
 800305c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800306c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003074:	ebb2 040a 	subs.w	r4, r2, sl
 8003078:	eb63 050b 	sbc.w	r5, r3, fp
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	00eb      	lsls	r3, r5, #3
 8003086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308a:	00e2      	lsls	r2, r4, #3
 800308c:	4614      	mov	r4, r2
 800308e:	461d      	mov	r5, r3
 8003090:	4643      	mov	r3, r8
 8003092:	18e3      	adds	r3, r4, r3
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	464b      	mov	r3, r9
 8003098:	eb45 0303 	adc.w	r3, r5, r3
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030aa:	4629      	mov	r1, r5
 80030ac:	028b      	lsls	r3, r1, #10
 80030ae:	4621      	mov	r1, r4
 80030b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b4:	4621      	mov	r1, r4
 80030b6:	028a      	lsls	r2, r1, #10
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030be:	2200      	movs	r2, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	61fa      	str	r2, [r7, #28]
 80030c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c8:	f7fd f87e 	bl	80001c8 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4613      	mov	r3, r2
 80030d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x204>)
 80030f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3750      	adds	r7, #80	@ 0x50
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	007a1200 	.word	0x007a1200

08003110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000010 	.word	0x20000010

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08004d48 	.word	0x08004d48

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	@ (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	08004d48 	.word	0x08004d48

08003178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07b      	b.n	8003282 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	d108      	bne.n	80031a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800319a:	d009      	beq.n	80031b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
 80031a2:	e005      	b.n	80031b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fc08 	bl	80019e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003234:	ea42 0103 	orr.w	r1, r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0104 	and.w	r1, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	f003 0210 	and.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003270:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e041      	b.n	8003320 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fe fc33 	bl	8001b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f000 fa17 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9a3 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f995 	bl	80036aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9a6 	bl	80036d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0204 	mvn.w	r2, #4
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f97d 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f96f 	bl	80036aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f980 	bl	80036d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f957 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f949 	bl	80036aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f95a 	bl	80036d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d020      	beq.n	8003470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0210 	mvn.w	r2, #16
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2208      	movs	r2, #8
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f931 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f923 	bl	80036aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f934 	bl	80036d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0201 	mvn.w	r2, #1
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f901 	bl	8003696 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 faee 	bl	8003a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f905 	bl	80036e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0220 	mvn.w	r2, #32
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fac0 	bl	8003a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIM_ConfigClockSource+0x1c>
 8003520:	2302      	movs	r3, #2
 8003522:	e0b4      	b.n	800368e <HAL_TIM_ConfigClockSource+0x186>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800354a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355c:	d03e      	beq.n	80035dc <HAL_TIM_ConfigClockSource+0xd4>
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003562:	f200 8087 	bhi.w	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356a:	f000 8086 	beq.w	800367a <HAL_TIM_ConfigClockSource+0x172>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003572:	d87f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b70      	cmp	r3, #112	@ 0x70
 8003576:	d01a      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0xa6>
 8003578:	2b70      	cmp	r3, #112	@ 0x70
 800357a:	d87b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b60      	cmp	r3, #96	@ 0x60
 800357e:	d050      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x11a>
 8003580:	2b60      	cmp	r3, #96	@ 0x60
 8003582:	d877      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b50      	cmp	r3, #80	@ 0x50
 8003586:	d03c      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xfa>
 8003588:	2b50      	cmp	r3, #80	@ 0x50
 800358a:	d873      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d058      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x13a>
 8003590:	2b40      	cmp	r3, #64	@ 0x40
 8003592:	d86f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b30      	cmp	r3, #48	@ 0x30
 8003596:	d064      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 8003598:	2b30      	cmp	r3, #48	@ 0x30
 800359a:	d86b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b20      	cmp	r3, #32
 800359e:	d060      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d867      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05c      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d05a      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035ac:	e062      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	f000 f9c3 	bl	8003948 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	609a      	str	r2, [r3, #8]
      break;
 80035da:	e04f      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	f000 f9ac 	bl	8003948 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035fe:	609a      	str	r2, [r3, #8]
      break;
 8003600:	e03c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	461a      	mov	r2, r3
 8003610:	f000 f920 	bl	8003854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2150      	movs	r1, #80	@ 0x50
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f979 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 8003620:	e02c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800362e:	461a      	mov	r2, r3
 8003630:	f000 f93f 	bl	80038b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2160      	movs	r1, #96	@ 0x60
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f969 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 8003640:	e01c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	461a      	mov	r2, r3
 8003650:	f000 f900 	bl	8003854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2140      	movs	r1, #64	@ 0x40
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f959 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 8003660:	e00c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f000 f950 	bl	8003912 <TIM_ITRx_SetConfig>
      break;
 8003672:	e003      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e000      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800367a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a46      	ldr	r2, [pc, #280]	@ (8003828 <TIM_Base_SetConfig+0x12c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371a:	d00f      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a43      	ldr	r2, [pc, #268]	@ (800382c <TIM_Base_SetConfig+0x130>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00b      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a42      	ldr	r2, [pc, #264]	@ (8003830 <TIM_Base_SetConfig+0x134>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a41      	ldr	r2, [pc, #260]	@ (8003834 <TIM_Base_SetConfig+0x138>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a40      	ldr	r2, [pc, #256]	@ (8003838 <TIM_Base_SetConfig+0x13c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a35      	ldr	r2, [pc, #212]	@ (8003828 <TIM_Base_SetConfig+0x12c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02b      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375c:	d027      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a32      	ldr	r2, [pc, #200]	@ (800382c <TIM_Base_SetConfig+0x130>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d023      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a31      	ldr	r2, [pc, #196]	@ (8003830 <TIM_Base_SetConfig+0x134>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01f      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a30      	ldr	r2, [pc, #192]	@ (8003834 <TIM_Base_SetConfig+0x138>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01b      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2f      	ldr	r2, [pc, #188]	@ (8003838 <TIM_Base_SetConfig+0x13c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d017      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2e      	ldr	r2, [pc, #184]	@ (800383c <TIM_Base_SetConfig+0x140>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2d      	ldr	r2, [pc, #180]	@ (8003840 <TIM_Base_SetConfig+0x144>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00f      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2c      	ldr	r2, [pc, #176]	@ (8003844 <TIM_Base_SetConfig+0x148>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2b      	ldr	r2, [pc, #172]	@ (8003848 <TIM_Base_SetConfig+0x14c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	@ (800384c <TIM_Base_SetConfig+0x150>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a29      	ldr	r2, [pc, #164]	@ (8003850 <TIM_Base_SetConfig+0x154>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d108      	bne.n	80037c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a10      	ldr	r2, [pc, #64]	@ (8003828 <TIM_Base_SetConfig+0x12c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0xf8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a12      	ldr	r2, [pc, #72]	@ (8003838 <TIM_Base_SetConfig+0x13c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d103      	bne.n	80037fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d105      	bne.n	800381a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]
  }
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40010400 	.word	0x40010400
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800
 8003848:	40001800 	.word	0x40001800
 800384c:	40001c00 	.word	0x40001c00
 8003850:	40002000 	.word	0x40002000

08003854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800387e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 030a 	bic.w	r3, r3, #10
 8003890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b087      	sub	sp, #28
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f023 0210 	bic.w	r2, r3, #16
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	031b      	lsls	r3, r3, #12
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	f043 0307 	orr.w	r3, r3, #7
 8003934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	431a      	orrs	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800399c:	2302      	movs	r3, #2
 800399e:	e05a      	b.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a21      	ldr	r2, [pc, #132]	@ (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ec:	d01d      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	@ (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a18      	ldr	r2, [pc, #96]	@ (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10c      	bne.n	8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40010400 	.word	0x40010400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40001800 	.word	0x40001800

08003a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e042      	b.n	8003b40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe f84a 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	@ 0x24
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fd69 	bl	80045c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	@ 0x28
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d175      	bne.n	8003c54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Transmit+0x2c>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e06e      	b.n	8003c56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2221      	movs	r2, #33	@ 0x21
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b86:	f7fe f9b5 	bl	8001ef4 <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	88fa      	ldrh	r2, [r7, #6]
 8003b90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	88fa      	ldrh	r2, [r7, #6]
 8003b96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba0:	d108      	bne.n	8003bb4 <HAL_UART_Transmit+0x6c>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e003      	b.n	8003bbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bbc:	e02e      	b.n	8003c1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	@ 0x80
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fb05 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e03a      	b.n	8003c56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e007      	b.n	8003c0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	781a      	ldrb	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1cb      	bne.n	8003bbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2140      	movs	r1, #64	@ 0x40
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fad1 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e006      	b.n	8003c56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b0ba      	sub	sp, #232	@ 0xe8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x66>
 8003cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fbc2 	bl	8004448 <UART_Receive_IT>
      return;
 8003cc4:	e25b      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80de 	beq.w	8003e8c <HAL_UART_IRQHandler+0x22c>
 8003cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d106      	bne.n	8003cea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80d1 	beq.w	8003e8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_UART_IRQHandler+0xae>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <HAL_UART_IRQHandler+0xd2>
 8003d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f043 0202 	orr.w	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_UART_IRQHandler+0xf6>
 8003d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_UART_IRQHandler+0x126>
 8003d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d105      	bne.n	8003d7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	f043 0208 	orr.w	r2, r3, #8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 81f2 	beq.w	8004174 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_UART_IRQHandler+0x14e>
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fb4d 	bl	8004448 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <HAL_UART_IRQHandler+0x17a>
 8003dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d04f      	beq.n	8003e7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa55 	bl	800428a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dea:	2b40      	cmp	r3, #64	@ 0x40
 8003dec:	d141      	bne.n	8003e72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3314      	adds	r3, #20
 8003df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1d9      	bne.n	8003dee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d013      	beq.n	8003e6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	4a7e      	ldr	r2, [pc, #504]	@ (8004040 <HAL_UART_IRQHandler+0x3e0>)
 8003e48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe f9dd 	bl	800220e <HAL_DMA_Abort_IT>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e64:	4610      	mov	r0, r2
 8003e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	e00e      	b.n	8003e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f99e 	bl	80041ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	e00a      	b.n	8003e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f99a 	bl	80041ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	e006      	b.n	8003e88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f996 	bl	80041ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e86:	e175      	b.n	8004174 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	bf00      	nop
    return;
 8003e8a:	e173      	b.n	8004174 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	f040 814f 	bne.w	8004134 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8148 	beq.w	8004134 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8141 	beq.w	8004134 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	f040 80b6 	bne.w	8004044 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ee4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8145 	beq.w	8004178 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	f080 813e 	bcs.w	8004178 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0e:	f000 8088 	beq.w	8004022 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1d9      	bne.n	8003f12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3314      	adds	r3, #20
 8003f64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e1      	bne.n	8003f5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e3      	bne.n	8003f9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff2:	f023 0310 	bic.w	r3, r3, #16
 8003ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004004:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004006:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800400a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e3      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe f886 	bl	800212e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004030:	b29b      	uxth	r3, r3
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	b29b      	uxth	r3, r3
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8c1 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800403e:	e09b      	b.n	8004178 <HAL_UART_IRQHandler+0x518>
 8004040:	08004351 	.word	0x08004351
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800404c:	b29b      	uxth	r3, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 808e 	beq.w	800417c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8089 	beq.w	800417c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800407a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004080:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800408e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004090:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004094:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800409c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e3      	bne.n	800406a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3314      	adds	r3, #20
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	623b      	str	r3, [r7, #32]
   return(result);
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80040c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e3      	bne.n	80040a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800410c:	61fa      	str	r2, [r7, #28]
 800410e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	69b9      	ldr	r1, [r7, #24]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	617b      	str	r3, [r7, #20]
   return(result);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e3      	bne.n	80040e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004126:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f847 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004132:	e023      	b.n	800417c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_UART_IRQHandler+0x4f4>
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f913 	bl	8004378 <UART_Transmit_IT>
    return;
 8004152:	e014      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <HAL_UART_IRQHandler+0x51e>
 8004160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f953 	bl	8004418 <UART_EndTransmit_IT>
    return;
 8004172:	e004      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
    return;
 8004174:	bf00      	nop
 8004176:	e002      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
      return;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_UART_IRQHandler+0x51e>
      return;
 800417c:	bf00      	nop
  }
}
 800417e:	37e8      	adds	r7, #232	@ 0xe8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e8:	e03b      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d037      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fd fe7f 	bl	8001ef4 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	6a3a      	ldr	r2, [r7, #32]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <UART_WaitOnFlagUntilTimeout+0x30>
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e03a      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d023      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0x8a>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b80      	cmp	r3, #128	@ 0x80
 800421e:	d020      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b40      	cmp	r3, #64	@ 0x40
 8004224:	d01d      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b08      	cmp	r3, #8
 8004232:	d116      	bne.n	8004262 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f81d 	bl	800428a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2208      	movs	r2, #8
 8004254:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e00f      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	429a      	cmp	r2, r3
 800427e:	d0b4      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428a:	b480      	push	{r7}
 800428c:	b095      	sub	sp, #84	@ 0x54
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80042b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d119      	bne.n	8004336 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	60bb      	str	r3, [r7, #8]
   return(result);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0310 	bic.w	r3, r3, #16
 8004318:	647b      	str	r3, [r7, #68]	@ 0x44
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004322:	61ba      	str	r2, [r7, #24]
 8004324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	613b      	str	r3, [r7, #16]
   return(result);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e5      	bne.n	8004302 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004344:	bf00      	nop
 8004346:	3754      	adds	r7, #84	@ 0x54
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff ff1e 	bl	80041ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b21      	cmp	r3, #33	@ 0x21
 800438a:	d13e      	bne.n	800440a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004394:	d114      	bne.n	80043c0 <UART_Transmit_IT+0x48>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d110      	bne.n	80043c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]
 80043be:	e008      	b.n	80043d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	1c59      	adds	r1, r3, #1
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6211      	str	r1, [r2, #32]
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4619      	mov	r1, r3
 80043e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004404:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fea3 	bl	8004184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	@ 0x30
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b22      	cmp	r3, #34	@ 0x22
 800445a:	f040 80ae 	bne.w	80045ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004466:	d117      	bne.n	8004498 <UART_Receive_IT+0x50>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d113      	bne.n	8004498 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	b29a      	uxth	r2, r3
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	1c9a      	adds	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28
 8004496:	e026      	b.n	80044e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044aa:	d007      	beq.n	80044bc <UART_Receive_IT+0x74>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <UART_Receive_IT+0x82>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e008      	b.n	80044dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4619      	mov	r1, r3
 80044f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d15d      	bne.n	80045b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0220 	bic.w	r2, r2, #32
 8004508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	2b01      	cmp	r3, #1
 800453e:	d135      	bne.n	80045ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	613b      	str	r3, [r7, #16]
   return(result);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f023 0310 	bic.w	r3, r3, #16
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004566:	623a      	str	r2, [r7, #32]
 8004568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	69f9      	ldr	r1, [r7, #28]
 800456c:	6a3a      	ldr	r2, [r7, #32]
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	61bb      	str	r3, [r7, #24]
   return(result);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e5      	bne.n	8004546 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b10      	cmp	r3, #16
 8004586:	d10a      	bne.n	800459e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff fe0b 	bl	80041c0 <HAL_UARTEx_RxEventCallback>
 80045aa:	e002      	b.n	80045b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fdf3 	bl	8004198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e002      	b.n	80045bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e000      	b.n	80045bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3730      	adds	r7, #48	@ 0x30
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b0c0      	sub	sp, #256	@ 0x100
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	68d9      	ldr	r1, [r3, #12]
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	ea40 0301 	orr.w	r3, r0, r1
 80045ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	431a      	orrs	r2, r3
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800461c:	f021 010c 	bic.w	r1, r1, #12
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800462a:	430b      	orrs	r3, r1
 800462c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800463a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463e:	6999      	ldr	r1, [r3, #24]
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	ea40 0301 	orr.w	r3, r0, r1
 800464a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4b8f      	ldr	r3, [pc, #572]	@ (8004890 <UART_SetConfig+0x2cc>)
 8004654:	429a      	cmp	r2, r3
 8004656:	d005      	beq.n	8004664 <UART_SetConfig+0xa0>
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b8d      	ldr	r3, [pc, #564]	@ (8004894 <UART_SetConfig+0x2d0>)
 8004660:	429a      	cmp	r2, r3
 8004662:	d104      	bne.n	800466e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7fe fd74 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8004668:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800466c:	e003      	b.n	8004676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800466e:	f7fe fd5b 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004672:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004680:	f040 810c 	bne.w	800489c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004688:	2200      	movs	r2, #0
 800468a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800468e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004696:	4622      	mov	r2, r4
 8004698:	462b      	mov	r3, r5
 800469a:	1891      	adds	r1, r2, r2
 800469c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800469e:	415b      	adcs	r3, r3
 80046a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046a6:	4621      	mov	r1, r4
 80046a8:	eb12 0801 	adds.w	r8, r2, r1
 80046ac:	4629      	mov	r1, r5
 80046ae:	eb43 0901 	adc.w	r9, r3, r1
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046c6:	4690      	mov	r8, r2
 80046c8:	4699      	mov	r9, r3
 80046ca:	4623      	mov	r3, r4
 80046cc:	eb18 0303 	adds.w	r3, r8, r3
 80046d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046d4:	462b      	mov	r3, r5
 80046d6:	eb49 0303 	adc.w	r3, r9, r3
 80046da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046f2:	460b      	mov	r3, r1
 80046f4:	18db      	adds	r3, r3, r3
 80046f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046f8:	4613      	mov	r3, r2
 80046fa:	eb42 0303 	adc.w	r3, r2, r3
 80046fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004708:	f7fb fd5e 	bl	80001c8 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4b61      	ldr	r3, [pc, #388]	@ (8004898 <UART_SetConfig+0x2d4>)
 8004712:	fba3 2302 	umull	r2, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	011c      	lsls	r4, r3, #4
 800471a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004724:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	1891      	adds	r1, r2, r2
 8004732:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004734:	415b      	adcs	r3, r3
 8004736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800473c:	4641      	mov	r1, r8
 800473e:	eb12 0a01 	adds.w	sl, r2, r1
 8004742:	4649      	mov	r1, r9
 8004744:	eb43 0b01 	adc.w	fp, r3, r1
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800475c:	4692      	mov	sl, r2
 800475e:	469b      	mov	fp, r3
 8004760:	4643      	mov	r3, r8
 8004762:	eb1a 0303 	adds.w	r3, sl, r3
 8004766:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800476a:	464b      	mov	r3, r9
 800476c:	eb4b 0303 	adc.w	r3, fp, r3
 8004770:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004780:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004788:	460b      	mov	r3, r1
 800478a:	18db      	adds	r3, r3, r3
 800478c:	643b      	str	r3, [r7, #64]	@ 0x40
 800478e:	4613      	mov	r3, r2
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	647b      	str	r3, [r7, #68]	@ 0x44
 8004796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800479a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800479e:	f7fb fd13 	bl	80001c8 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004898 <UART_SetConfig+0x2d4>)
 80047aa:	fba3 2301 	umull	r2, r3, r3, r1
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2264      	movs	r2, #100	@ 0x64
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	1acb      	subs	r3, r1, r3
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047be:	4b36      	ldr	r3, [pc, #216]	@ (8004898 <UART_SetConfig+0x2d4>)
 80047c0:	fba3 2302 	umull	r2, r3, r3, r2
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047cc:	441c      	add	r4, r3
 80047ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	1891      	adds	r1, r2, r2
 80047e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047e8:	415b      	adcs	r3, r3
 80047ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047f0:	4641      	mov	r1, r8
 80047f2:	1851      	adds	r1, r2, r1
 80047f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80047f6:	4649      	mov	r1, r9
 80047f8:	414b      	adcs	r3, r1
 80047fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004808:	4659      	mov	r1, fp
 800480a:	00cb      	lsls	r3, r1, #3
 800480c:	4651      	mov	r1, sl
 800480e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004812:	4651      	mov	r1, sl
 8004814:	00ca      	lsls	r2, r1, #3
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	4603      	mov	r3, r0
 800481c:	4642      	mov	r2, r8
 800481e:	189b      	adds	r3, r3, r2
 8004820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004824:	464b      	mov	r3, r9
 8004826:	460a      	mov	r2, r1
 8004828:	eb42 0303 	adc.w	r3, r2, r3
 800482c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800483c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004844:	460b      	mov	r3, r1
 8004846:	18db      	adds	r3, r3, r3
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484a:	4613      	mov	r3, r2
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800485a:	f7fb fcb5 	bl	80001c8 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <UART_SetConfig+0x2d4>)
 8004864:	fba3 1302 	umull	r1, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	2164      	movs	r1, #100	@ 0x64
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	3332      	adds	r3, #50	@ 0x32
 8004876:	4a08      	ldr	r2, [pc, #32]	@ (8004898 <UART_SetConfig+0x2d4>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	f003 0207 	and.w	r2, r3, #7
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4422      	add	r2, r4
 800488a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800488c:	e106      	b.n	8004a9c <UART_SetConfig+0x4d8>
 800488e:	bf00      	nop
 8004890:	40011000 	.word	0x40011000
 8004894:	40011400 	.word	0x40011400
 8004898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800489c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048ae:	4642      	mov	r2, r8
 80048b0:	464b      	mov	r3, r9
 80048b2:	1891      	adds	r1, r2, r2
 80048b4:	6239      	str	r1, [r7, #32]
 80048b6:	415b      	adcs	r3, r3
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048be:	4641      	mov	r1, r8
 80048c0:	1854      	adds	r4, r2, r1
 80048c2:	4649      	mov	r1, r9
 80048c4:	eb43 0501 	adc.w	r5, r3, r1
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	00eb      	lsls	r3, r5, #3
 80048d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048d6:	00e2      	lsls	r2, r4, #3
 80048d8:	4614      	mov	r4, r2
 80048da:	461d      	mov	r5, r3
 80048dc:	4643      	mov	r3, r8
 80048de:	18e3      	adds	r3, r4, r3
 80048e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048e4:	464b      	mov	r3, r9
 80048e6:	eb45 0303 	adc.w	r3, r5, r3
 80048ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800490a:	4629      	mov	r1, r5
 800490c:	008b      	lsls	r3, r1, #2
 800490e:	4621      	mov	r1, r4
 8004910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004914:	4621      	mov	r1, r4
 8004916:	008a      	lsls	r2, r1, #2
 8004918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800491c:	f7fb fc54 	bl	80001c8 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4b60      	ldr	r3, [pc, #384]	@ (8004aa8 <UART_SetConfig+0x4e4>)
 8004926:	fba3 2302 	umull	r2, r3, r3, r2
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	011c      	lsls	r4, r3, #4
 800492e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004938:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800493c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	1891      	adds	r1, r2, r2
 8004946:	61b9      	str	r1, [r7, #24]
 8004948:	415b      	adcs	r3, r3
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004950:	4641      	mov	r1, r8
 8004952:	1851      	adds	r1, r2, r1
 8004954:	6139      	str	r1, [r7, #16]
 8004956:	4649      	mov	r1, r9
 8004958:	414b      	adcs	r3, r1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004968:	4659      	mov	r1, fp
 800496a:	00cb      	lsls	r3, r1, #3
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004972:	4651      	mov	r1, sl
 8004974:	00ca      	lsls	r2, r1, #3
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	4603      	mov	r3, r0
 800497c:	4642      	mov	r2, r8
 800497e:	189b      	adds	r3, r3, r2
 8004980:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004984:	464b      	mov	r3, r9
 8004986:	460a      	mov	r2, r1
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	67bb      	str	r3, [r7, #120]	@ 0x78
 800499a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049a8:	4649      	mov	r1, r9
 80049aa:	008b      	lsls	r3, r1, #2
 80049ac:	4641      	mov	r1, r8
 80049ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b2:	4641      	mov	r1, r8
 80049b4:	008a      	lsls	r2, r1, #2
 80049b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049ba:	f7fb fc05 	bl	80001c8 <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	4b38      	ldr	r3, [pc, #224]	@ (8004aa8 <UART_SetConfig+0x4e4>)
 80049c6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2264      	movs	r2, #100	@ 0x64
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	1acb      	subs	r3, r1, r3
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	3332      	adds	r3, #50	@ 0x32
 80049d8:	4a33      	ldr	r2, [pc, #204]	@ (8004aa8 <UART_SetConfig+0x4e4>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049e4:	441c      	add	r4, r3
 80049e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ea:	2200      	movs	r2, #0
 80049ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80049f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	415b      	adcs	r3, r3
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a04:	4641      	mov	r1, r8
 8004a06:	1851      	adds	r1, r2, r1
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	414b      	adcs	r3, r1
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	00cb      	lsls	r3, r1, #3
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a26:	4651      	mov	r1, sl
 8004a28:	00ca      	lsls	r2, r1, #3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4642      	mov	r2, r8
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a36:	464b      	mov	r3, r9
 8004a38:	460a      	mov	r2, r1
 8004a3a:	eb42 0303 	adc.w	r3, r2, r3
 8004a3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a58:	4649      	mov	r1, r9
 8004a5a:	008b      	lsls	r3, r1, #2
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a62:	4641      	mov	r1, r8
 8004a64:	008a      	lsls	r2, r1, #2
 8004a66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a6a:	f7fb fbad 	bl	80001c8 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa8 <UART_SetConfig+0x4e4>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	2164      	movs	r1, #100	@ 0x64
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	3332      	adds	r3, #50	@ 0x32
 8004a86:	4a08      	ldr	r2, [pc, #32]	@ (8004aa8 <UART_SetConfig+0x4e4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 020f 	and.w	r2, r3, #15
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4422      	add	r2, r4
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa8:	51eb851f 	.word	0x51eb851f

08004aac <memset>:
 8004aac:	4402      	add	r2, r0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d100      	bne.n	8004ab6 <memset+0xa>
 8004ab4:	4770      	bx	lr
 8004ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aba:	e7f9      	b.n	8004ab0 <memset+0x4>

08004abc <__libc_init_array>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	4d0d      	ldr	r5, [pc, #52]	@ (8004af4 <__libc_init_array+0x38>)
 8004ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8004af8 <__libc_init_array+0x3c>)
 8004ac2:	1b64      	subs	r4, r4, r5
 8004ac4:	10a4      	asrs	r4, r4, #2
 8004ac6:	2600      	movs	r6, #0
 8004ac8:	42a6      	cmp	r6, r4
 8004aca:	d109      	bne.n	8004ae0 <__libc_init_array+0x24>
 8004acc:	4d0b      	ldr	r5, [pc, #44]	@ (8004afc <__libc_init_array+0x40>)
 8004ace:	4c0c      	ldr	r4, [pc, #48]	@ (8004b00 <__libc_init_array+0x44>)
 8004ad0:	f000 f818 	bl	8004b04 <_init>
 8004ad4:	1b64      	subs	r4, r4, r5
 8004ad6:	10a4      	asrs	r4, r4, #2
 8004ad8:	2600      	movs	r6, #0
 8004ada:	42a6      	cmp	r6, r4
 8004adc:	d105      	bne.n	8004aea <__libc_init_array+0x2e>
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
 8004ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae4:	4798      	blx	r3
 8004ae6:	3601      	adds	r6, #1
 8004ae8:	e7ee      	b.n	8004ac8 <__libc_init_array+0xc>
 8004aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aee:	4798      	blx	r3
 8004af0:	3601      	adds	r6, #1
 8004af2:	e7f2      	b.n	8004ada <__libc_init_array+0x1e>
 8004af4:	08004d58 	.word	0x08004d58
 8004af8:	08004d58 	.word	0x08004d58
 8004afc:	08004d58 	.word	0x08004d58
 8004b00:	08004d5c 	.word	0x08004d5c

08004b04 <_init>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr

08004b10 <_fini>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr
